# YOLOv5 🚀 by Ultralytics, GPL-3.0 license

# Parameters
nc: 2  # number of classes
depth_multiple: 0.33  # model depth multiple（BottleneckCSP, C3, C3TR, C3Ghost等层重复次数的系数）
width_multiple: 0.50  # layer channel multiple 将本配置里面的backbone和head部分有关Conv通道（卷积核个数）的设置，全部乘以该系数
anchors:
  - [10,13, 16,30, 33,23]  # P3/8, p3检测层，相对于输入下采样8倍
  - [30,61, 62,45, 59,119]  # P4/16, p4检测层，下采样16倍
  - [116,90, 156,198, 373,326]  # P5/32, p5检测层，下采样32倍

# YOLOv5 v6.0 backbone
backbone:
  # [from, number, module, args]
  # from表示当前模块的输入来自哪一层的输出，-1表示来自上一层的输出，3表示第3层（从0开始数）
  # number表示本模块重复的次数，1表示只有一个，3表示重复3次
  # args表示本模块的特定参数
  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2, args [output channel(本参数乘以width_multiple后才为实际的输出通道),  kernel, stride, padding]
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4 args [output channel,  kernel, stride, padding=1]
   [-1, 3, C3, [128]], # args [output channel]
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8 
   [-1, 6, C3, [256]],
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
   [-1, 9, C3, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
   [-1, 3, C3, [1024]],
   [-1, 1, SPPF, [1024, 5]],  # 9 args [input channel, output channel]
  ]

# YOLOv5 v6.0 head, YOLOv5 head = PANet+Detect
head:
  [[-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']], # 2倍上采样，args [size,scale_factor,mode]
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4，args [dimension]
   [-1, 3, C3, [512, False]],  # 13, args [output channel,shortcut]

   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 14], 1, Concat, [1]],  # cat head P4
   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 10], 1, Concat, [1]],  # cat head P5
   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)

   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)，第17、20、23层为Detect模块的输入, args就是上面的nc和anchors
  ]
